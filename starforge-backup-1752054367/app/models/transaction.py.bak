from app import db
from datetime import datetime

class Transaction(db.Model):
    __tablename__ = "transactions"

    id            = db.Column(db.Integer, primary_key=True)
    amount_cents  = db.Column(db.Integer, nullable=False)
    email         = db.Column(db.String(128), nullable=True)           # Who donated/purchased
    sponsor_id    = db.Column(db.Integer, db.ForeignKey("sponsors.id"), nullable=True)
    stripe_id     = db.Column(db.String(64), nullable=True)            # Stripe payment/session ID
    status        = db.Column(db.String(32), default="completed")      # pending, completed, refunded, failed, etc.
    created_at    = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at    = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # --- Relationships --- #
    sponsor = db.relationship("Sponsor", backref="transactions", lazy=True)

    # --- Properties --- #
    @property
    def amount(self) -> float:
        """Return amount in dollars for display."""
        return self.amount_cents / 100.0

    def as_dict(self):
        """API-friendly serialization."""
        return {
            "id": self.id,
            "amount_cents": self.amount_cents,
            "amount": self.amount,
            "email": self.email,
            "sponsor_id": self.sponsor_id,
            "stripe_id": self.stripe_id,
            "status": self.status,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat(),
        }
