{% set NONCE = NONCE if NONCE is defined else (csp_nonce() if csp_nonce is defined else '') %}
{% set _ver = ASSET_VER if ASSET_VER is defined else (ASSET_VERSION if ASSET_VERSION is defined else (VERSION if VERSION is defined else None)) %}
{% set href_tokens   = url_for('static', filename='css/brand.tokens.css', v=_ver) if _ver else url_for('static', filename='css/brand.tokens.css') %}
{% set href_tailwind = url_for('static', filename='css/tailwind.min.css', v=_ver)  if _ver else url_for('static', filename='css/tailwind.min.css') %}
{% set href_output   = url_for('static', filename='css/output.css', v=_ver)        if _ver else url_for('static', filename='css/output.css') %}
{% set href_theme    = url_for('static', filename='css/fc_prestige.css', v=_ver)   if _ver else url_for('static', filename='css/fc_prestige.css') %}
{% set js_href       = url_for('static', filename='js/bundle.min.js', v=_ver)      if _ver else url_for('static', filename='js/bundle.min.js') %}
{# Optional Subresource Integrity map: SRI = {'tokens':'', 'tailwind':'', 'output':'', 'theme':'', 'bundle':''} #}
{% set SRI = SRI if SRI is defined else {} %}

<!doctype html>
<html lang="en" class="h-full" data-theme="dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <meta name="color-scheme" content="dark light" />
    <meta name="theme-color" content="#0b0b0c" id="meta-theme-color" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    {# Opt-in CSP meta for static hosting only; prefer server headers #}
    {% if ENABLE_CSP_META %}<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">{% endif %}
    <title>{% block title %}Connect ATX Elite{% endblock %}</title>

    {% block meta %}{% endblock %}
    {% block head %}{% endblock %}

    {# Perf hints #}
    <link rel="preconnect" href="/socket.io/" crossorigin>
    <link rel="dns-prefetch" href="/socket.io/">
    <link rel="preload" as="style" href="{{ href_tailwind }}" {% if SRI.tailwind %}integrity="{{ SRI.tailwind }}" crossorigin="anonymous"{% endif %}>
    <link rel="preload" as="script" href="{{ js_href }}" {% if SRI.bundle %}integrity="{{ SRI.bundle }}" crossorigin="anonymous"{% endif %}>

    {# CSS: tokens → framework → compiled → theme #}
    <link rel="stylesheet" href="{{ href_tokens }}" {% if SRI.tokens %}integrity="{{ SRI.tokens }}" crossorigin="anonymous"{% endif %}/>
    <link rel="stylesheet" href="{{ href_tailwind }}" {% if SRI.tailwind %}integrity="{{ SRI.tailwind }}" crossorigin="anonymous"{% endif %}/>
    <link rel="stylesheet" href="{{ href_output }}" {% if SRI.output %}integrity="{{ SRI.output }}" crossorigin="anonymous"{% endif %}/>
    <link rel="stylesheet" href="{{ href_theme }}"  {% if SRI.theme  %}integrity="{{ SRI.theme  }}" crossorigin="anonymous"{% endif %}/>

    {# Progressive enhancement flags #}
    <script nonce="{{ NONCE }}">
      (function(){
        try{
          if (matchMedia('(prefers-reduced-motion: reduce)').matches) document.documentElement.classList.add('reduced-motion');
          if (navigator.connection && navigator.connection.saveData)   document.documentElement.classList.add('save-data');
        }catch(_){}
      })();
    </script>
    <link id="elite-upgrades-css" rel="stylesheet" href="{{ url_for('static', filename='css/elite-upgrades.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/header-safe.css') }}">
  </head>

  <body class="min-h-full bg-zinc-950 text-zinc-100 selection:bg-yellow-300/30">
    <a href="#main" class="sr-only focus:not-sr-only focus:absolute focus:top-2 focus:left-2 bg-zinc-900 px-3 py-2 rounded">Skip to content</a>

    {# Shared polite live region for realtime updates #}
    <div id="sr-live" class="sr-only" aria-live="polite" aria-atomic="true"></div>

    {# Global bootstrap tokens #}
    {% include "partials/ui_bootstrap.html" ignore missing with context %}

    {# Global header + announcement #}
    {% include "partials/header_and_announcement.html" ignore missing with context %}
    {% include "partials/header_sponsor_ticker.html" ignore missing with context %}

    {# Optional page hero #}
    {% block hero %}{% endblock %}

    <main id="main" role="main" class="relative">
      <h1 class="sr-only">{% block h1 %}Connect ATX Elite{% endblock %}</h1>
      {% block content %}{% endblock %}
    </main>

    {% include "partials/footer.html" ignore missing with context %}
    {% include "partials/back_to_top.html" ignore missing with context %}
    {% include "partials/sticky_cta_manager.html" ignore missing with context %}

    {# App bundle #}
    <script src="{{ js_href }}" defer nonce="{{ NONCE }}" {% if SRI.bundle %}integrity="{{ SRI.bundle }}" crossorigin="anonymous"{% endif %}></script>

    {# --- Security/Perf utilities (tiny, CSP-safe) --- #}
    <script nonce="{{ NONCE }}">
      // Ensure window.open has no opener; enforce rel=noopener on _blank links
      (function(){
        try{
          const _open = window.open;
          window.open = function(u,n,s){ const w = _open.call(window,u,n||'_blank',s); try{ if(w) w.opener=null; }catch(_){} return w; };
        }catch(_){}
        document.addEventListener('click', e => {
          const a = e.target.closest && e.target.closest('a[target="_blank"]');
          if (a && (!a.rel || !/\bnoopener\b/.test(a.rel))) a.rel = (a.rel? a.rel+' ':'') + 'noopener noreferrer';
        }, { passive:true });
      })();
    </script>

    {# --- Scroll restore on reload (path-scoped; respects anchors & motion) --- #}
    <script nonce="{{ NONCE }}">
      (function(){
        const KEY = 'scroll:'+location.pathname+location.search;
        try{ history.scrollRestoration = 'manual'; }catch(_){}
        function restore(){
          if (location.hash) return; // native anchor handling
          const y = parseInt(sessionStorage.getItem(KEY)||'0',10) || 0;
          if (!y) return;
          requestAnimationFrame(()=>window.scrollTo(0,y));
          setTimeout(()=>window.scrollTo(0,y),120); // second pass after late content
        }
        addEventListener('beforeunload', ()=> {
          const y = window.pageYOffset || document.documentElement.scrollTop || 0;
          try{ sessionStorage.setItem(KEY, String(y)); }catch(_){}
        });
        document.addEventListener('DOMContentLoaded', restore, { once:true });
        addEventListener('load', restore, { once:true });
      })();
    </script>

    {# ─────────────────────────── Realtime + UX glue ───────────────────────── #}

    {# Socket.IO bridge + polling fallback -> emits fc:meter:update & fc:funds:update #}
    <script nonce="{{ NONCE }}">
      (function () {
        if (window.__fcSocketInit) return; window.__fcSocketInit = true;
        const saveData = !!(navigator.connection && navigator.connection.saveData);
        const visible  = () => !document.hidden;
        const emit = (n,d) => { try{ dispatchEvent(new CustomEvent(n,{detail:d})) }catch(_){} };
        const sr = document.getElementById('sr-live');
        let socket=null, reconnects=0, lastSeq=-1, last={raised:0, goal:0}, lastTs=0;

        function pushMeter(raised, goal, extra){
          if (typeof extra?.seq==='number' && extra.seq<=lastSeq) return;
          if (typeof extra?.seq==='number') lastSeq = extra.seq;
          if (raised===last.raised && goal===last.goal) return;
          last={raised,goal};
          const payload={raised,goal,sponsorName:extra?.sponsorName,seq:extra?.seq,ts:Date.now()};
          emit('fc:meter:update', payload); emit('fc:funds:update', payload);
          if (sr) sr.textContent = `Funds updated. ${Math.round((raised/Math.max(goal||1,1))*100)}% of goal.`;
        }

        function connect(){
          if (!window.io || socket) return;
          socket = window.io({ path:'/socket.io', transports:['websocket'], reconnection:false, autoConnect:false, timeout: saveData?8000:4000 });
          const open = () => { if (visible()) try{ socket.connect(); }catch(_){} };
          socket.on('connect', ()=>{ reconnects=0; emit('fc:analytics',{event:'socket_connect'}) });
          socket.on('disconnect',()=>{ emit('fc:analytics',{event:'socket_disconnect'}); scheduleReconnect(); });
          socket.on('funds:update', (d)=>{ const t=Date.now(); if (t-lastTs < (saveData?1500:350)) return; lastTs=t; pushMeter(+d?.raised||0, +d?.goal||0, { sponsorName:d?.sponsorName, seq:d?.seq }); });
          socket.on('sponsor:vip', (d)=> emit('fc:sponsor:vip', d||{}));
          open();
          addEventListener('visibilitychange', ()=>{ if (!socket) return; if (document.hidden){ try{ socket.close(); }catch{} } else { scheduleReconnect(100); }});
        }

        function scheduleReconnect(min=0){
          if (!window.io) return;
          if (socket){ try{ socket.close(); }catch{} socket=null; }
          const base = saveData?2000:600, jitter=Math.random()*200;
          reconnects++; const delay = Math.min(6000, Math.pow(2, Math.min(reconnects,5))*base)+jitter;
          setTimeout(connect, Math.max(min, delay));
        }

        (window.requestIdleCallback||setTimeout)(()=>{ try{ const l=document.createElement('link'); l.rel='preconnect'; l.href='/socket.io/'; l.crossOrigin=''; document.head.appendChild(l);}catch(_){} connect(); },1);

        // Polling fallback (HEADless friendly)
        (function poll(){
          let ok=true;
          setInterval(async()=> {
            if (socket && socket.connected) return;
            if (!visible()) return;
            try{
              const res = await fetch('/api/stats', { headers:{Accept:'application/json'} });
              if (!res.ok) throw 0;
              const j = await res.json();
              pushMeter(+j.raised||+j.funds_raised||0, +j.goal||+j.fundraising_goal||0);
              if (!ok){ ok=true; emit('fc:analytics',{event:'poll_recovered'}) }
            }catch{ if (ok){ ok=false; emit('fc:analytics',{event:'poll_failed'}) } }
          }, saveData?30000:15000);
        })();
      })();
    </script>

    {# Normalize updates to all meters (header, hero, etc.) #}
    <script nonce="{{ NONCE }}">
      (function(){
        if (window.__fcMeterBridge) return; window.__fcMeterBridge = true;
        const sync = (r,g)=> dispatchEvent(new CustomEvent('fc:meter:update',{detail:{raised:r,goal:g}}));
        addEventListener('fc:funds:update', e=>{ const d=e.detail||{}; if (d.raised!=null || d.goal!=null) sync(+d.raised||0,+d.goal||0); }, { passive:true });
        if (window.htmx){
          document.body.addEventListener('htmx:afterSwap', e=>{
            if (e.target && e.target.id==='fundraiser-meter'){
              const r=parseFloat(e.target.dataset.raised||'0'), g=parseFloat(e.target.dataset.goal||'0'); sync(r,g);
            }
          });
        }
      })();
    </script>

    {# Optimistic UI on quick-donate taps #}
    <script nonce="{{ NONCE }}">
      (function(){
        if (window.__fcOptimistic) return; window.__fcOptimistic = true;
        let delta=0, t=null;
        document.addEventListener('click', e=>{
          const b=e.target.closest?.('[data-amount]'); if(!b) return;
          delta += +b.dataset.amount || 0;
          const m=(window.getHeroMeter&&window.getHeroMeter())||{raised:0,goal:0};
          const raised=(m.raised||0)+delta, goal=m.goal||0;
          window.updateHeroMeter&&window.updateHeroMeter(raised,goal);
          dispatchEvent(new CustomEvent('fc:meter:update',{detail:{raised,goal}}));
          clearTimeout(t); t=setTimeout(()=>delta=0,12000);
        }, { passive:true });
        addEventListener('fc:meter:update', ()=> delta=0, { passive:true });
      })();
    </script>

    {# Title pulse on progress #}
    <script nonce="{{ NONCE }}">
      (function(){
        if (window.__fcTitlePulse) return; window.__fcTitlePulse = true;
        const BASE=document.title;
        addEventListener('fc:meter:update', e=>{
          const d=e.detail||{}, p=Math.max(0,Math.min(100,(d.raised/Math.max(d.goal||1,1))*100));
          document.title=`⭐ ${Math.round(p)}% • ${BASE}`;
          setTimeout(()=>document.title=BASE,4000);
        }, { passive:true });
      })();
    </script>

    {# Sponsor ticker hook #}
    <script nonce="{{ NONCE }}">
      (function(){
        if (window.__fcTickerHook) return; window.__fcTickerHook = true;
        const q=[]; let draining=false;
        addEventListener('fc:funds:update', e=>{
          const name=e.detail && e.detail.sponsorName; if(!name) return;
          q.push(String(name)); if(!draining) drain();
        }, { passive:true });
        function drain(){
          const el=document.getElementById('fc-ticker'); if(!el) return;
          draining=true; const name=q.shift();
          if(name){
            const safe=name.replace(/[<>&]/g,c=>({'<':'&lt;','>':'&gt;','&':'&amp;'}[c]));
            el.insertAdjacentHTML('beforeend', `<span class="mx-6 text-xs text-zinc-300">🏅 ${safe}</span>`);
            setTimeout(drain,1500);
          } else { draining=false; }
        }
      })();
    </script>

    {# VIP leaderboard auto-refresh (HTMX) #}
    <script nonce="{{ NONCE }}">
      (function(){
        if (window.__fcVipRefresh) return; window.__fcVipRefresh = true;
        const panel=document.getElementById('vip-leaderboard'); if(!panel||!window.htmx) return;
        const io=new IntersectionObserver((ents)=> panel.__visible = ents[0]?.isIntersecting, { threshold:.1 });
        io.observe(panel);
        let d=null; addEventListener('fc:meter:update', ()=>{
          if(!panel.__visible) return; clearTimeout(d); d=setTimeout(()=> window.htmx.trigger(panel,'refresh'),600);
        }, { passive:true });
      })();
    </script>

    {# Upscale pack #}
    <script nonce="{{ NONCE }}">
      (function(){
        if (!window.__fcUpscale) window.__fcUpscale = true; else return;

        // Header micro-meter
        (function(){
          const hdr=document.getElementById('hdr-meter'); if(!hdr) return;
          const fill=hdr.querySelector('.fill'), pctLbl=hdr.querySelector('[data-hdr-pct]'), sr=document.getElementById('hdr-sr');
          addEventListener('fc:meter:update', e=>{
            const d=e.detail||{}, pct=Math.max(0,Math.min(100,(d.raised/Math.max(d.goal||1,1))*100));
            if(fill) fill.style.width=pct.toFixed(1)+'%';
            if(pctLbl) pctLbl.textContent=pct.toFixed(0)+'%';
            if(sr) sr.textContent=`Raised ${Math.round(pct)} percent`;
          }, { passive:true });
        })();

        // Reveal-on-scroll
        (function(){
          const els=[...document.querySelectorAll('.fc-reveal')];
          if(!('IntersectionObserver' in window)){ els.forEach(el=>el.classList.add('is-visible')); return; }
          const io=new IntersectionObserver((ents)=>ents.forEach(en=>en.isIntersecting&&en.target.classList.add('is-visible')), { rootMargin:'0px 0px -10% 0px', threshold:.08 });
          els.forEach(el=>io.observe(el));
        })();

        // Anchor scroll-spy
        (function(){
          const ids=['mission','program-stats','tiers','sponsor-hub','sponsor-spotlight','sponsor-wall-widget','sponsor-wall','newsletter'];
          const links=[...document.querySelectorAll('a[href^="#"]')].filter(a=>ids.includes(a.getAttribute('href').slice(1)));
          if(!links.length||!('IntersectionObserver' in window)) return;
          const map=new Map(links.map(l=>[l.getAttribute('href').slice(1),l]));
          const io=new IntersectionObserver((ents)=>{
            ents.forEach(ent=>{
              const id=ent.target.id, a=map.get(id); if(!a) return;
              if(ent.isIntersecting){ links.forEach(x=>{x.classList.remove('active');x.removeAttribute('aria-current');}); a.classList.add('active'); a.setAttribute('aria-current','page'); }
            });
          }, { rootMargin:'-25% 0px -60% 0px', threshold:.01 });
          map.forEach((_,id)=>{ const sec=document.getElementById(id); if(sec) io.observe(sec); });
        })();

        //

