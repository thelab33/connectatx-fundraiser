<meta name="generator" content="HTML Tidy for HTML5 for Linux version 5.8.0" />>
<style>>
  :root {>
    --primary-yellow: #facc15;>
    --bg-dark: #000;>
    --text-light: #fff;>
    --stat-bg: rgba(36, 36, 36, 0.88);>
    --stat-border: rgba(250, 205, 21, 0.28);>
    --header-height: 4rem;>
    --scroll-offset: calc(var(--header-height) + 1rem);>
  }>
  section[id] {>
    scroll-margin-top: var(--scroll-offset);>
  }>
  .connect-stats {>
    padding: 4rem 1.5rem 3.5rem;>
    background: linear-gradient(99deg, var(--bg-dark) 72%, #18181b 100%);>
    color: var(--text-light);>
    text-align: center;>
    user-select: none;>
    position: relative;>
    z-index: 1;>
  }>
  .stats-grid {>
    display: flex;>
    flex-wrap: wrap;>
    justify-content: center;>
    gap: 2.2rem;>
    max-width: 64rem;>
    margin: 0 auto;>
  }>
  .stat-card {>
    background: var(--stat-bg);>
    border: 2px solid var(--stat-border);>
    border-radius: 1.3rem;>
    padding: 2.2rem 1.2rem;>
    width: 10rem;>
    min-width: 8.3rem;>
    box-shadow: 0 4px 18px #18181b44;>
    position: relative;>
    transition:>
      transform 0.23s,>
      box-shadow 0.23s,>
      border 0.2s;>
    outline: none;>
  }>
  .stat-card:focus-within,>
  .stat-card:focus,>
  .stat-card:hover {>
    transform: scale(1.08) translateY(-3px);>
    box-shadow:>
      0 0 0 4px var(--primary-yellow),>
      0 8px 28px #facc1555;>
    z-index: 10;>
    border: 2.3px solid #fde68a;>
  }>
  .stat-card .info {>
    position: absolute;>
    top: 1rem;>
    right: 1rem;>
    font-size: 1.3rem;>
    color: #fde68a;>
    opacity: 0.7;>
    cursor: pointer;>
    transition: opacity 0.15s;>
  }>
  .stat-card .info:hover,>
  .stat-card .info:focus {>
    opacity: 1;>
  }>
  .counter {>
    font-size: 2.9rem;>
    font-weight: 900;>
    color: var(--primary-yellow);>
    margin-bottom: 0.5rem;>
    text-shadow: 0 2px 7px #facc1533;>
    letter-spacing: -0.01em;>
    font-variant-numeric: tabular-nums;>
    line-height: 1.09;>
    transition: color 0.2s;>
  }>
  .label {>
    font-size: 1.1rem;>
    color: rgba(255, 255, 255, 0.91);>
    font-weight: 700;>
    letter-spacing: -0.01em;>
  }>
  .stat-confetti {>
    position: absolute;>
    left: 55%;>
    top: 18%;>
    z-index: 99;>
    pointer-events: none;>
    font-size: 2.2rem;>
    opacity: 0;>
    transition: opacity 0.5s;>
    filter: drop-shadow(0 1px 8px #fde68a77);>
  }>
  @media (max-width: 900px) {>
    .stats-grid {>
      gap: 1.1rem;>
    }>
    .stat-card {>
      width: 8.2rem;>
      padding: 1.3rem 0.7rem;>
    }>
    .counter {>
      font-size: 2rem;>
    }>
  }>
  @media (max-width: 600px) {>
    .connect-stats {>
      padding: 2.1rem 0.25rem 1.5rem;>
    }>
    .stats-grid {>
      gap: 0.55rem;>
    }>
    .stat-card {>
      min-width: 6rem;>
    }>
  }>
</style>>
<section>
  id="starforge-stats">
  class="connect-stats relative overflow-visible">
  role="region">
  aria-labelledby="stats-heading">
  tabindex="-1">
>>
  <h2 id="starforge-stats-heading" class="sr-starforge-only">Program Stats</h2>>
  <div class="stats-starforge-grid">>
    {% set stats_defaults = { 'players': 16, 'honor_roll': 11, 'tournaments':>
    12, 'years': 3 } %} {% for key, label in { 'players': 'Players Enrolled',>
    'honor_roll': 'Honor Roll Scholars', 'tournaments': 'Tournaments Played',>
    'years': 'Years Running' }.items() %}>
    <div>>
      class="stat-starforge-card" tabindex="0" aria-label="{{ stats[key] if>
      stats is defined and stats[key] is defined else stats_defaults[key] }} {{>
      label }}" > <<span>🎉</span>>
      <span>>
        class="starforge-starforge-counter">
        data-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-starforge-target="{{>
        stats[key] if stats is defined and stats[key] is defined else>
        stats_defaults[key] }}" > 0</span>
      >>
      <>
      <div>{{ label }}</div>>
      <!-- (Optional) Info icon, SaaS style -->>
      <span>>
        class="starforge-starforge-info" tabindex="0" role="button">
        aria-label="How is this stat tracked?" title="How is this stat tracked?">
        onclick="alert('This stat is updated after every season &amp; verified>
        by the coaches.')" style="display: none" >ℹ️</span>
      >>
    </div>>
    {% endfor %}>
  </div>>
  <!-- Example: Call-to-action after stats -->>
  <div class="mt-10 text-center text-yellow-300/90 font-semibold text-lg">>
    <<span>🏆 Our stats are real — and growing.</span>>
    <a href="#tiers" class="underline hover:text-yellow-100 transition">
      >Sponsor the next milestone →</a>
    >>
  </div>>
  <script>>
    document.addEventListener("DOMContentLoaded", () => {>
      const counters = document.querySelectorAll(".counter");>
      let confettiFired = false;>
      const animateCounters = () => {>
        counters.forEach((el) => {>
          const target = +el.dataset.target;>
          let count = 0;>
          const increment = Math.max(1, Math.ceil(target / 68));>
          function step() {>
            count += increment;>
            if (count >= target) {>
              el.textContent = target;>
              if (!confettiFired) {>
                // 🎉 Show confetti on the first stat card only>
                const confetti = el>
                  .closest(".stat-card")>
                  .querySelector(".stat-confetti");>
                if (confetti) {>
                  confetti.style.opacity = 1;>
                  confetti.textContent = "🎉✨";>
                  setTimeout(() => (confetti.style.opacity = 0), 1400);>
                }>
                confettiFired = true;>
              }>
            } else {>
              el.textContent = count;>
              requestAnimationFrame(step);>
            }>
          }>
          requestAnimationFrame(step);>
        });>
      };>
      const observer = new IntersectionObserver(>
        (entries, obs) => {>
          if (entries[0].isIntersecting) {>
            animateCounters();>
            obs.disconnect();>
          }>
        },>
        { threshold: 0.29 },>
      );>
      observer.observe(document.getElementById("stats"));>
    });>
  </script>>
</section>>
