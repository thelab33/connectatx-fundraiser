# Starforge SaaS Diagnostic
Generated: 2025-07-14 16:08:58.026156

### Environment Variables
DATABASE_URL=sqlite:////home/cyberboyz/connectatx-fundraiser/starforge-saas/app/data/app.db
FLASK_APP=run.py
FLASK_CONFIG=config.DevelopmentConfig
FLASK_DEBUG=1
FLASK_ENV=development
SECRET_KEY=your-local-dev-secret
STRIPE_PUBLIC_KEY=pk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
STRIPE_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
STRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx

### .env file
# ── Flask Core ───────────────────────────────────────────────
FLASK_ENV=development
FLASK_DEBUG=1
FLASK_CONFIG=config.DevelopmentConfig
SECRET_KEY=your-local-dev-secret  # Can be any random string for now


# ── Database (MySQL + SQLAlchemy) ────────────────────────────
DB_USER=starforge_user
DB_PASSWORD=YourNewPassword123!
DB_HOST=localhost
DB_NAME=starforge_dev

# ── Stripe Payments ──────────────────────────────────────────
STRIPE_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
STRIPE_PUBLIC_KEY=pk_live_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
STRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxxxxxxxxx
DOMAIN=https://connect-atx-elite.com

# ── Email Delivery (SendGrid) ────────────────────────────────
MAIL_SERVER=smtp.sendgrid.net
MAIL_PORT=587
MAIL_USE_TLS=true
MAIL_USERNAME=apikey
MAIL_PASSWORD=SG.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
MAIL_DEFAULT_SENDER="Connect ATX Elite <team@connectatx.com>"

# ── Redis (Socket.IO, Cache, Throttling) ─────────────────────
REDIS_URL=redis://default:redispw@redis:6379/0
CACHE_TYPE=redis
CACHE_REDIS_URL=redis://default:redispw@redis:6379/0

# ── Twilio SMS & Voice (optional) ────────────────────────────
TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TWILIO_AUTH_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TWILIO_FROM_NUMBER=+15551234567

# ── Sentry (Error Monitoring) ────────────────────────────────
SENTRY_DSN=https://xxxxxxxxxxxxxxxx@sentry.io/xxxxxxx

# ── Slack Alerts & Logs (optional) ───────────────────────────
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/XXX/YYY/ZZZ

# ── OpenAI API (optional) ────────────────────────────────────
OPENAI_API_KEY=sk-openai_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ── Logging & Feature Flags ──────────────────────────────────
LOG_LEVEL=INFO
FEATURE_CONFETTI=true
FEATURE_DARK_MODE=true
FEATURE_AI_THANK_YOU=true

# ── Diagnostics ──────────────────────────────────────────────
PRINT_CONFIG=false

### --- Local Dev Override (auto-patch) ---
# Comment this out when you want MySQL again.
# DATABASE_URL=sqlite:///$(pwd)/app/data/app.db
DATABASE_URL=sqlite:////home/cyberboyz/connectatx-fundraiser/starforge-saas/app/data/app.db


### app/config.py
# config.py — Environment-driven configuration for Connect ATX Elite
from __future__ import annotations
import os
import json
import logging
from datetime import timedelta
from pathlib import Path
from typing import Final, Type, Iterable

# ────────────── Helpers ───────────────────────────────────────────
# BASE_DIR is your project root
BASE_DIR: Final[Path] = Path(__file__).resolve().parent

def _bool(key: str, default: bool = False) -> bool:
    return os.getenv(key, str(int(default))).strip().lower() in {"1", "true", "yes", "on"}

def _int(key: str, default: int) -> int:
    try:
        return int(os.getenv(key, default))
    except ValueError:
        raise RuntimeError(f"Env var {key} must be integer, got: {os.getenv(key)}")


# ────────────── Base Configuration ─────────────────────────────────
class BaseConfig:
    SECRET_KEY: str = os.getenv("SECRET_KEY", "change-me-before-prod")
    ENV: Final[str] = os.getenv("FLASK_ENV", "production")
    DEBUG: bool = _bool("DEBUG", False)
    LOG_LEVEL: Final[str] = os.getenv("LOG_LEVEL", "INFO").upper()
    PERMANENT_SESSION_LIFETIME: timedelta = timedelta(days=7)

    SQLALCHEMY_TRACK_MODIFICATIONS: bool = False
    SQLALCHEMY_DATABASE_URI: str = (
        os.getenv("DATABASE_URL") or f"sqlite:///{BASE_DIR}/app/data/app.db"
    )

    # Payments
    STRIPE_SECRET_KEY: str | None = os.getenv("STRIPE_SECRET_KEY")
    STRIPE_PUBLIC_KEY: str | None = os.getenv("STRIPE_PUBLIC_KEY")

    # Email
    MAIL_SERVER: str = os.getenv("MAIL_SERVER", "smtp.example.com")
    MAIL_PORT: int = _int("MAIL_PORT", 587)
    MAIL_USE_TLS: bool = _bool("MAIL_USE_TLS", True)
    MAIL_USERNAME: str | None = os.getenv("MAIL_USERNAME")
    MAIL_PASSWORD: str | None = os.getenv("MAIL_PASSWORD")
    MAIL_DEFAULT_SENDER: str = os.getenv("MAIL_DEFAULT_SENDER", "noreply@connectatxelite.com")

    # Feature toggles
    FEATURE_DARK_MODE: bool = _bool("FEATURE_DARK_MODE", True)

    # Branding
    BRAND_NAME: str = os.getenv("BRAND_NAME", "Connect ATX Elite")
    BRAND_TAGLINE: str = os.getenv(
        "BRAND_TAGLINE",
        "Family-run AAU basketball building future leaders in East Austin."
    )
    PRIMARY_COLOR: str = os.getenv("PRIMARY_COLOR", "#facc15")

    @classmethod
    def init_app(cls, app):
        logging.basicConfig(
            level=cls.LOG_LEVEL,
            format="[%(asctime)s] %(levelname)s in %(module)s: %(message)s"
        )
        if _bool("PRINT_CONFIG", False):
            app.logger.info("Loaded configuration: %s", cls.__name__)
            print(json.dumps(
                {k: v for k, v in cls.__dict__.items() if k.isupper()},
                indent=2,
            ))

class DevelopmentConfig(BaseConfig):
    ENV = "development"
    DEBUG = True

class TestingConfig(BaseConfig):
    ENV = "testing"
    TESTING: bool = True
    DEBUG: bool = True
    SQLALCHEMY_DATABASE_URI: str = (
        os.getenv("DATABASE_URL") or f"sqlite:///{BASE_DIR}/app/data/app.db"
    )

class ProductionConfig(BaseConfig):
    ENV = "production"
    DEBUG = False
    SESSION_COOKIE_SECURE: bool = True

    REQUIRED_VARS: Final[Iterable[str]] = (
        "SECRET_KEY",
        "STRIPE_SECRET_KEY",
        "STRIPE_PUBLIC_KEY",
        "MAIL_SERVER",
        "MAIL_USERNAME",
        "MAIL_PASSWORD",
    )

    @classmethod
    def init_app(cls, app):
        super().init_app(app)
        missing = [var for var in cls.REQUIRED_VARS if not os.getenv(var)]
        if missing:
            raise RuntimeError(f"Missing required environment vars: {', '.join(missing)}")

# Selector
config_map: dict[str, Type[BaseConfig]] = {
    "development": DevelopmentConfig,
    "testing": TestingConfig,
    "production": ProductionConfig,
}

def get_config() -> Type[BaseConfig]:
    return config_map.get(os.getenv("FLASK_ENV", "production"), ProductionConfig)

config = get_config()

... (truncated)

### Hard-coded DB URI hits
./.env.bak.1752527142:58:DATABASE_URL=sqlite:///$(pwd)/app/data/app.db
./.env.bak.1752526912:9:DATABASE_URL=mysql+pymysql://starforge_user:your_password@localhost/starforge_dev
./.env:58:# DATABASE_URL=sqlite:///$(pwd)/app/data/app.db
./.env:59:DATABASE_URL=sqlite:////home/cyberboyz/connectatx-fundraiser/starforge-saas/app/data/app.db
./.env.example:3:DATABASE_URL=sqlite:///instance/app.db
./starforge_audit.py:106:    needed = ["FLASK_ENV", "FLASK_CONFIG", "FLASK_DEBUG", "DATABASE_URL", "STRIPE_API_KEY"]
./starforge_config_doctor.py:8:    "SQLALCHEMY_DATABASE_URI": {"desc": "SQLAlchemy DB URI", "suggest": "mysql+pymysql://user:password@host/db"},
./starforge_saas_offline_bootstrap.py:90:        "DATABASE_URL",
./starforge_saas_offline_bootstrap.py:116:        "DEV_DATABASE_URL",
./starforge_saas_offline_bootstrap.py:128:        "TEST_DATABASE_URL",


### Active Flask Config
{
  "DEBUG": true,
  "ENV": "development",
  "SQLALCHEMY_BINDS": {},
  "SQLALCHEMY_DATABASE_URI": "sqlite:////home/cyberboyz/connectatx-fundraiser/starforge-saas/app/data/app.db",
  "SQLALCHEMY_ECHO": false,
  "SQLALCHEMY_ENGINE_OPTIONS": {},
  "SQLALCHEMY_RECORD_QUERIES": false,
  "SQLALCHEMY_TRACK_MODIFICATIONS": false
}

### DB ping
✗ Textual SQL expression 'SELECT 1' should be explicitly declared as text('SELECT 1')

### Flask Routes
{'OPTIONS', 'HEAD', 'GET'}  /static/<path:filename>
{'OPTIONS', 'HEAD', 'GET'}  /
{'POST', 'OPTIONS', 'HEAD', 'GET'}  /sponsor
{'POST', 'OPTIONS', 'HEAD', 'GET'}  /become_sponsor
{'OPTIONS', 'HEAD', 'GET'}  /index
{'OPTIONS', 'HEAD', 'GET'}  /api/status
{'OPTIONS', 'HEAD', 'GET'}  /api/stats
{'OPTIONS', 'HEAD', 'GET'}  /api/example/<uuid:uuid>
{'POST', 'OPTIONS'}  /api/example/<uuid:uuid>/delete
{'POST', 'OPTIONS'}  /api/example/<uuid:uuid>/restore
{'POST', 'OPTIONS'}  /sms/webhook
{'POST', 'OPTIONS'}  /stripe/webhook
{'POST', 'OPTIONS'}  /stripe/create-checkout-session
{'POST', 'OPTIONS'}  /webhook/stripe
{'OPTIONS', 'HEAD', 'GET'}  /