invalid_token: The token is not valid as it was issued in the future


[33m[1m+===========================================================================================================================================================================================+[0m


[31m[1mDEPRECATED: [0m[33m[1mthis command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.[0m


[32mWe highly encourage switching to the new [0m[32m[1m`scan`[0m[32m command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.[0m


[33m[1m+===========================================================================================================================================================================================+[0m


+==============================================================================+

                               /$$$$$$            /$$
                              /$$__  $$          | $$
           /$$$$$$$  /$$$$$$ | $$  \__//$$$$$$  /$$$$$$   /$$   /$$
          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$
         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$
          \____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$
          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$
         |_______/  \_______/|__/     \_______/   \___/   \____  $$
                                                          /$$  | $$
                                                         |  $$$$$$/
  by safetycli.com                                        \______/

+==============================================================================+

 [1mREPORT[0m 

  Safety [1mv3.6.0[0m is scanning for [1mVulnerabilities[0m[1m...[0m
[1m  Scanning dependencies[0m in your [1mfiles:[0m

  -> requirements.txt

  Using [1mopen-source vulnerability database[0m
[1m  Found and scanned 18 packages[0m
  Timestamp [1m2025-07-15 13:25:04[0m
[1m  17[0m[1m vulnerabilities reported[0m
[1m  0[0m[1m vulnerabilities ignored[0m

+==============================================================================+
 [1mVULNERABILITIES REPORTED[0m 
+==============================================================================+

[31m-> Vulnerability found in gunicorn version 22.0.0[0m
[1m   Vulnerability ID: [0m72809
[1m   Affected spec: [0m>=22.0.0,<23.0.0
[1m   ADVISORY: [0mA vulnerability in Gunicorn allowed the
   TolerateDangerousFraming setting to process conflicting headers (Transfer-
   Encoding and Content-Length) and dangerous characters in HTTP header
   fields. This could lead to HTTP request smuggling and header injection
   attacks. The issue was resolved by removing this setting and enforcing
   stricter header validation. Note: It happens due to an incomplete fix for
   CVE-2024-1135.
[1m   PVE-2024-72809[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/72809/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 72809 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in gunicorn version 22.0.0[0m
[1m   Vulnerability ID: [0m76244
[1m   Affected spec: [0m<23.0.0
[1m   ADVISORY: [0mGunicorn version 21.2.0 does not properly validate the
   value of the 'Transfer-Encoding' header as specified in the RFC standards,
   which leads to the default fallback method of 'Content-Length,' making it
   vulnerable to TE.CL request smuggling. This vulnerability can lead to
   cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data
   integrity compromise, security bypass, information leakage, and business
   logic abuse.
[1m   CVE-2024-6827[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76244/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76244 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in sentry-sdk version 2.3.0[0m
[1m   Vulnerability ID: [0m72260
[1m   Affected spec: [0m<2.8.0
[1m   ADVISORY: [0mAffected versions of Sentry's Python SDK are vulnerable
   to unintentional exposure of environment variables to subprocesses despite
   the env={} setting. In Python's 'subprocess' calls, all environment
   variables are passed to subprocesses by default. However, if you
   specifically do not want them to be passed to subprocesses, you may use
   'env' argument in 'subprocess' calls. Due to the bug in Sentry SDK, with
   the Stdlib integration enabled (which is enabled by default), this
   expectation is not fulfilled, and all environment variables are being
   passed to subprocesses instead. As a workaround, and if passing
   environment variables to child processes poses a security risk for you,
   you can disable all default integrations.
[1m   CVE-2024-40647[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/72260/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 72260 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in twilio version 9.0.3[0m
[1m   Vulnerability ID: [0m71167
[1m   Affected spec: [0m<9.1.0
[1m   ADVISORY: [0mTwilio version 9.1.0 includes a security upgrade for the
   aiohttp dependency, updating it from version 3.8.6 to 3.9.4. This update
   addresses the vulnerability identified as CVE-2024-27306.
[1m   CVE-2024-27306[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/71167/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 71167 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in twilio version 9.0.3[0m
[1m   Vulnerability ID: [0m68033
[1m   Affected spec: [0m<9.0.5
[1m   ADVISORY: [0mTwilio version 9.0.5 has upgraded its certifi library
   from version 2021.10.8 to 2023.7.22 in response to the security issue
   detailed in CVE-2023-37920.
[1m   CVE-2023-37920[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/68033/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 68033 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in twilio version 9.0.3[0m
[1m   Vulnerability ID: [0m67976
[1m   Affected spec: [0m<9.0.5
[1m   ADVISORY: [0mTwilio version 9.0.5 has updated its certifi library
   from version 2021.10.8 to 2023.7.22 to address the security vulnerability
   identified in CVE-2022-23491.
[1m   CVE-2022-23491[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/67976/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 67976 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in twilio version 9.0.3[0m
[1m   Vulnerability ID: [0m68034
[1m   Affected spec: [0m<9.0.5
[1m   ADVISORY: [0mTwilio version 9.0.5 has updated its certifi library
   from version 2021.10.8 to 2023.7.22 in response to the security concerns
   outlined in CVE-2023-32681.
[1m   CVE-2023-32681[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/68034/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 68034 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in gevent version 24.2.1[0m
[1m   Vulnerability ID: [0m76839
[1m   Affected spec: [0m<25.4.2
[1m   ADVISORY: [0mAffected versions of gevent were potentially vulnerable
   to HTTP request smuggling. The issue existed in the pywsgi
   Input._send_100_continue handling.
[1m   PVE-2025-76839[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76839/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76839 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in gevent version 24.2.1[0m
[1m   Vulnerability ID: [0m73655
[1m   Affected spec: [0m<24.10.1
[1m   ADVISORY: [0mAffected versions of gevent are potentially vulnerable
   to a Race Condition leading to Unauthorized Access â€” CWE-362.
[1m   PVE-2024-73655[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/73655/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 73655 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in eventlet version 0.35.2[0m
[1m   Vulnerability ID: [0m73179
[1m   Affected spec: [0m<0.37.0
[1m   ADVISORY: [0mEventlet affected versions contain a vulnerability in
   HTTP header processing within the WSGI implementation. This flaw could
   allow attackers to craft specially formatted headers, potentially causing
   header name collisions or overwriting important headers in the WSGI
   environment. Such manipulation could lead to security issues depending on
   how applications process these headers.
[1m   PVE-2024-73179[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/73179/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 73179 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask-cors version 3.0.1[0m
[1m   Vulnerability ID: [0m76241
[1m   Affected spec: [0m<4.0.1
[1m   ADVISORY: [0mcorydolphin/flask-cors version 4.0.1 contains an
   improper regex path matching vulnerability. The plugin prioritizes longer
   regex patterns over more specific ones when matching paths, which can lead
   to less restrictive CORS policies being applied to sensitive endpoints.
   This mismatch in regex pattern priority allows unauthorized cross-origin
   access to sensitive data or functionality, potentially exposing
   confidential information and increasing the risk of unauthorized actions
   by malicious actors.
[1m   CVE-2024-6839[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76241/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76241 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask-cors version 3.0.1[0m
[1m   Vulnerability ID: [0m70624
[1m   Affected spec: [0m<4.0.1
[1m   ADVISORY: [0mcorydolphin/flask-cors is vulnerable to log injection
   when the log level is set to debug. An attacker can inject fake log
   entries into the log file by sending a specially crafted GET request
   containing a CRLF sequence in the request path. This vulnerability allows
   attackers to corrupt log files, potentially covering tracks of other
   attacks, confusing log post-processing tools, and forging log entries. The
   issue is due to improper output neutralization for logs. See
   CVE-2024-1681.
[1m   CVE-2024-1681[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/70624/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 70624 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask-cors version 3.0.1[0m
[1m   Vulnerability ID: [0m76237
[1m   Affected spec: [0m<4.0.1
[1m   ADVISORY: [0mcorydolphin/flask-cors version 4.0.1 contains a
   vulnerability where the request path matching is case-insensitive due to
   the use of the try_match function, which is originally intended for
   matching hosts. This results in a mismatch because paths in URLs are case-
   sensitive, but the regex matching treats them as case-insensitive. This
   misconfiguration can lead to significant security vulnerabilities,
   allowing unauthorized origins to access paths meant to be restricted,
   resulting in data exposure and potential data leaks.
[1m   CVE-2024-6866[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76237/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76237 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask-cors version 3.0.1[0m
[1m   Vulnerability ID: [0m76242
[1m   Affected spec: [0m<4.0.1
[1m   ADVISORY: [0mA vulnerability in corydolphin/flask-cors version 4.0.1
   allows for inconsistent CORS matching due to the handling of the '+'
   character in URL paths. The request.path is passed through the
   unquote_plus function, which converts the '+' character to a space ' '.
   This behavior leads to incorrect path normalization, causing potential
   mismatches in CORS configuration. As a result, endpoints may not be
   matched correctly to their CORS settings, leading to unexpected CORS
   policy application. This can cause unauthorized cross-origin access or
   block valid requests, creating security vulnerabilities and usability
   issues.
[1m   CVE-2024-6844[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/76242/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 76242 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask-cors version 3.0.1[0m
[1m   Vulnerability ID: [0m72731
[1m   Affected spec: [0m<4.0.2
[1m   ADVISORY: [0mA vulnerability in corydolphin/flask-cors version 4.0.1
   allows the `Access-Control-Allow-Private-Network` CORS header to be set to
   true by default. This behavior can expose private network resources to
   unauthorized external access, leading to significant security risks such
   as data breaches, unauthorized access to sensitive information, and
   potential network intrusions.
[1m   CVE-2024-6221[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/72731/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 72731 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask-cors version 3.0.1[0m
[1m   Vulnerability ID: [0m38745
[1m   Affected spec: [0m<3.0.9
[1m   ADVISORY: [0mFlask-CORS before 3.0.9 allows ../ directory traversal
   to access private resources because resource matching does not ensure that
   pathnames are in a canonical format. See CVE-2020-25032.
[1m   CVE-2020-25032[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/38745/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 38745 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


[31m-> Vulnerability found in flask version 3.0.3[0m
[1m   Vulnerability ID: [0m77323
[1m   Affected spec: [0m<3.1.1
[1m   ADVISORY: [0mAffected versions of Flask (â‰¤ 3.1.0) are vulnerable to
   incorrect fallback key configuration in session signing, leading to stale
   key usage instead of the intended current key. This flaw undermines
   session integrity, enabling remote attackers to forge or tamper with
   cookies via manipulated SECRET_KEY_FALLBACKS parameters. The vulnerability
   exists in the itsdangerous-based signing routines within flask.sessions
   (fallback key list ordering).
[1m   CVE-2025-47278[0m
[1m   For more information about this vulnerability, visit
   [0mhttps://data.safetycli.com/v/77323/97c[0m
   To ignore this vulnerability, use PyUp vulnerability id 77323 in safetyâ€™s
   ignore command-line argument or add the ignore to your safety policy file.


+==============================================================================+
   [32m[1mREMEDIATIONS[0m

  17 vulnerabilities were reported in 7 packages. For detailed remediation & 
  fix recommendations, upgrade to a commercial license. 

+==============================================================================+

 Scan was completed. 17 vulnerabilities were reported. 

+==============================================================================+[0m


[33m[1m+===========================================================================================================================================================================================+[0m


[31m[1mDEPRECATED: [0m[33m[1mthis command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.[0m


[32mWe highly encourage switching to the new [0m[32m[1m`scan`[0m[32m command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.[0m


[33m[1m+===========================================================================================================================================================================================+[0m


