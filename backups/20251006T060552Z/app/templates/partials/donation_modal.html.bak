{# =============================================================================
   donation_modal.html — FundChamps • Deluxe Donation Modal (CSP-safe)
   - One canonical place for the entire donation flow (Stripe + PayPal)
   - Safe endpoints discovery across blueprints
   ============================================================================= #}

{# ---------- Safe fallbacks & tokens ---------- #}
{% set NONCE = NONCE if NONCE is defined else (csp_nonce if csp_nonce is defined else '') %}
{% set team_name      = team.team_name if team and team.team_name else 'FundChamps' %}
{% set brand_color    = team.theme_color if team and team.theme_color else '#facc15' %}
{% set vip_threshold  = (team.vip_amount if team and team.vip_amount else 500) | int %}
{% set min_amount     = min_amount|default(5) | int %}
{% set default_amount = default_amount|default(50) | int %}
{% set csrf           = (csrf_token() if csrf_token is defined else '') %}

{# ---------- Endpoint discovery (prefer fc_payments, then api, else sane defaults) ---------- #}
{% set _has = (has_endpoint is defined) %}
{% set _sf  = (safe_url_for is defined) %}
{% set stripe_intent_url  = (
      _sf and _has and has_endpoint('fc_payments.create_stripe_intent') and safe_url_for('fc_payments.create_stripe_intent')
  ) or (
      _sf and _has and has_endpoint('api.create_payment_intent') and safe_url_for('api.create_payment_intent')
  ) or '/api/payments/stripe/intent' %}
{% set paypal_order_url   = (
      _sf and _has and has_endpoint('fc_payments.paypal_order') and safe_url_for('fc_payments.paypal_order')
  ) or (
      _sf and _has and has_endpoint('api.create_paypal_order') and safe_url_for('api.create_paypal_order')
  ) or '/api/payments/paypal/order' %}
{% set paypal_capture_url = (
      _sf and _has and has_endpoint('fc_payments.paypal_capture') and safe_url_for('fc_payments.paypal_capture')
  ) or (
      _sf and _has and has_endpoint('api.capture_paypal_order') and safe_url_for('api.capture_paypal_order')
  ) or '/api/payments/paypal/capture' %}

<dialog id="donation-modal"
        class="z-50 w-[92vw] max-w-2xl rounded-2xl p-0 backdrop:bg-black/70"
        aria-modal="true" role="dialog" aria-labelledby="donate-title">
  <div id="donate-box"
       class="relative grid grid-cols-1 gap-0 overflow-hidden rounded-2xl border border-yellow-400/25 bg-zinc-950 text-zinc-100 shadow-2xl md:grid-cols-2"
       role="document" tabindex="0"
       style="--fc-brand: {{ brand_color }};">
    <!-- Left: Form -->
    <section class="mx-auto w-[min(92rem,96vw)] px-3 sm:px-6 p-5 md:p-6">
      <header class="mb-3 flex items-start justify-between">
        <div>
          <h3 id="donate-title" class="text-xl font-extrabold text-yellow-300">Support {{ team_name }}</h3>
          <p class="mt-1 text-xs text-yellow-100/80">Every dollar fuels gym time, travel, and academics.</p>
        </div>
        <button type="button"
                class="rounded-lg border border-yellow-400/30 bg-black/60 px-3 py-1 text-lg hover:bg-black/70 focus:outline-none focus-visible:ring-2 focus-visible:ring-yellow-300"
                aria-label="Close donation modal" data-close>&times;</button>
      </header>

      <!-- Amount presets -->
      <fieldset class="mb-3" aria-label="Select amount">
        <div class="grid grid-cols-3 gap-2">
          {% for amt in [25,50,100,250,500,1000] %}
          <button type="button" data-amount="{{ amt }}"
                  class="fc-amt w-full rounded-xl border border-yellow-400/20 bg-zinc-900/70 px-3 py-2 font-bold hover:bg-zinc-900 focus:outline-none focus-visible:ring-2 focus-visible:ring-yellow-300">
            ${{ '{:,.0f}'.format(amt) }}
          </button>
          {% endfor %}
        </div>
        <div class="mt-3 flex items-stretch gap-2">
          <label for="donate-custom" class="sr-only">Custom amount</label>
          <div class="flex flex-1 items-center rounded-xl border border-yellow-400/20 bg-zinc-900/70">
            <span class="px-3" aria-hidden="true">$</span>
            <input id="donate-custom" inputmode="decimal" pattern="[0-9]*" autocomplete="off"
                   placeholder="{{ default_amount }}" class="w-full bg-transparent py-2 pr-3 outline-none"
                   aria-describedby="donate-err" />
          </div>
          <label class="inline-flex items-center gap-2 whitespace-nowrap rounded-xl border border-yellow-400/20 bg-zinc-900/70 px-3">
            <input id="donate-fee" type="checkbox" class="h-4 w-4 rounded border-yellow-400/40 bg-zinc-900" />
            <span class="text-xs">Cover fees</span>
          </label>
        </div>
        <p class="mt-1 text-xs text-zinc-400">Typical fees ~2.9% + $0.30</p>
      </fieldset>

      <!-- Donor info -->
      <div class="grid grid-cols-1 gap-2">
        <label class="text-xs">
          <span class="sr-only">Name</span>
          <input id="donor-name" type="text" inputmode="text" autocomplete="name"
                 class="w-full rounded-lg border border-yellow-400/20 bg-zinc-900/70 px-3 py-2 outline-none"
                 placeholder="Your name (optional)" />
        </label>
        <label class="text-xs">
          <span class="sr-only">Email</span>
          <input id="donor-email" type="email" inputmode="email" autocomplete="email"
                 class="w-full rounded-lg border border-yellow-400/20 bg-zinc-900/70 px-3 py-2 outline-none"
                 placeholder="Email for receipt (optional)" />
        </label>
        <label class="text-xs">
          <span class="sr-only">Message (optional)</span>
          <input id="donor-note" type="text"
                 class="w-full rounded-lg border border-yellow-400/20 bg-zinc-900/70 px-3 py-2 outline-none"
                 placeholder="Add a note (optional)" />
        </label>
      </div>

      <!-- Payment method tabs -->
      <nav class="mt-4 flex gap-2 text-sm" role="tablist" aria-label="Payment methods">
        <button class="pm-tab rounded-full bg-yellow-300/20 px-3 py-1.5 font-semibold text-yellow-200 data-[active=true]:bg-yellow-400 data-[active=true]:text-black"
                data-tab="card" aria-selected="true" role="tab">💳 Card</button>
        <button class="pm-tab rounded-full bg-yellow-300/20 px-3 py-1.5 font-semibold text-yellow-200 data-[active=true]:bg-yellow-400 data-[active=true]:text-black"
                data-tab="paypal" aria-selected="false" role="tab">🅿 PayPal</button>
        <button id="prb-tab" class="pm-tab hidden rounded-full bg-yellow-300/20 px-3 py-1.5 font-semibold text-yellow-200 data-[active=true]:bg-yellow-400 data-[active=true]:text-black"
                data-tab="payreq" aria-selected="false" role="tab">⚡️ Apple/Google Pay</button>
      </nav>

      <!-- Panels -->
      <div class="mt-3 space-y-3">
        <!-- Card -->
        <div id="panel-card" role="tabpanel" aria-labelledby="tab-card">
          <div id="card-element" class="min-h-[44px] rounded-lg border border-yellow-400/20 bg-zinc-900/70 px-3 py-2"></div>
          <button id="pay-card" type="button"
                  class="mt-3 inline-flex w-full items-center justify-center gap-2 rounded-xl px-4 py-3 font-extrabold text-black focus:outline-none focus-visible:ring-2 focus-visible:ring-yellow-300"
                  style="background: linear-gradient(90deg, var(--fc-brand), color-mix(in srgb, var(--fc-brand) 80%, #ffffff));">
            Pay <span id="pay-total-card"></span>
          </button>
        </div>

        <!-- Pay Request (Apple/Google) -->
        <div id="panel-payreq" class="hidden" role="tabpanel" aria-labelledby="tab-payreq">
          <div id="payment-request-button" class="min-h-[44px]"></div>
          <p class="mt-2 text-xs text-zinc-400">Fast checkout via Apple Pay / Google Pay (where available).</p>
        </div>

        <!-- PayPal -->
        <div id="panel-paypal" class="hidden" role="tabpanel" aria-labelledby="tab-paypal">
          <button id="pay-paypal" type="button"
                  class="inline-flex w-full items-center justify-center gap-2 rounded-xl bg-[#ffc439] px-4 py-3 font-extrabold text-black hover:brightness-95 focus:outline-none focus-visible:ring-2 focus-visible:ring-yellow-300">
            Pay with PayPal <span id="pay-total-pp"></span>
          </button>
        </div>
      </div>

      <!-- Error + tiny print -->
      <p id="donate-err" class="mt-3 min-h-[1.25rem] text-xs text-red-300" role="alert" aria-live="assertive"></p>
      <div class="mt-2 text-[11px] leading-relaxed text-zinc-400">
        Secure by Stripe &amp; PayPal. You’ll see the charge from “{{ team_name }}”.
      </div>
    </section>

    <!-- Right: Summary / VIP / Success -->
    <aside class="flex flex-col gap-3 bg-gradient-to-b from-yellow-900/20 to-transparent p-5 md:p-6">
      <div class="rounded-2xl border border-yellow-400/20 bg-black/40 p-4">
        <div class="flex items-center justify-between text-sm">
          <span>Donation</span><span id="sum-base" class="font-bold">$—</span>
        </div>
        <div class="mt-1 flex items-center justify-between text-sm">
          <span>Fees (if covered)</span><span id="sum-fee">$0.00</span>
        </div>
        <hr class="my-2 border-yellow-400/20" />
        <div class="flex items-center justify-between text-base font-extrabold">
          <span>Total</span><span id="sum-total" class="text-yellow-300">$—</span>
        </div>
        <p id="vip-badge" class="mt-2 hidden rounded-full bg-yellow-300 px-3 py-1 text-center text-xs font-black text-black">🎉 VIP Impact!</p>
      </div>

      <div class="rounded-2xl border border-yellow-400/20 bg-black/40 p-4 text-xs text-yellow-100/90">
        💡 <strong>Where it goes:</strong> gym time, tournament travel, academic support, and gear.
      </div>

      <div id="success-box" class="hidden rounded-2xl border border-green-400/25 bg-green-900/20 p-4 text-sm text-green-200">
        <div class="font-extrabold">Thank you! 🏆</div>
        <div>Your gift was received. You’ll get an email receipt shortly.</div>
      </div>
    </aside>
  </div>
</dialog>

<style nonce="{{ NONCE }}">
  #donation-modal::backdrop{ background: rgba(0,0,0,.7) }
  #donation-modal[open] #donate-box{ animation: dm-pop .22s cubic-bezier(.18,.89,.32,1.28) }
  @keyframes dm-pop{ from{opacity:0; transform:translateY(6px) scale(.98)} to{opacity:1; transform:none} }
  .pm-tab[data-active="true"]{ outline: 2px solid color-mix(in srgb, var(--fc-brand) 55%, #fde68a) }
  @media (prefers-reduced-motion: reduce){ #donation-modal[open] #donate-box{ animation: none !important } }
</style>

<script nonce="{{ NONCE }}">
(() => {
  const dlg = document.getElementById('donation-modal');
  if (!dlg || dlg.__init) return; dlg.__init = true;

  // --------------- Utilities ---------------
  const sr = document.getElementById('sr-live');
  const announce = (t)=>{ try{ if(sr){ sr.textContent=t } }catch(_){} };
  const reduceMotion = matchMedia && matchMedia('(prefers-reduced-motion: reduce)').matches;

  // Robust scroll lock (no layout jump, restores position)
  const ScrollGuard = (() => {
    let y = 0, pr = 0, hadLock = false;
    const barW = () => Math.max(0, window.innerWidth - document.documentElement.clientWidth);
    return {
      lock(){
        if (hadLock) return;
        y = window.scrollY || document.documentElement.scrollTop || 0;
        pr = barW();
        document.documentElement.classList.add('overflow-hidden');
        document.body.classList.add('overflow-hidden');
        document.body.style.top = `-${y}px`;
        document.body.style.position = 'fixed';
        if (pr) document.body.style.paddingRight = pr + 'px';
        hadLock = true;
      },
      unlock(){
        if (!hadLock) return;
        document.documentElement.classList.remove('overflow-hidden');
        document.body.classList.remove('overflow-hidden');
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.paddingRight = '';
        window.scrollTo(0, y);
        hadLock = false;
      }
    };
  })();

  const getCSRF = () =>
    (document.cookie.match(/(?:^|;\\s*)csrf_token=([^;]+)/)?.[1] ||
     document.querySelector('meta[name="csrf-token"]')?.content ||
     {{ csrf|tojson if tojson is defined else '"' ~ csrf ~ '"' }});

  // ---- Elements
  const box   = document.getElementById('donate-box');
  const err   = document.getElementById('donate-err');
  const feeCb = document.getElementById('donate-fee');
  const nameI = document.getElementById('donor-name');
  const mailI = document.getElementById('donor-email');
  const noteI = document.getElementById('donor-note');
  const custom= document.getElementById('donate-custom');
  const payCardBtn = document.getElementById('pay-card');
  const payPPBtn   = document.getElementById('pay-paypal');
  const totalCard  = document.getElementById('pay-total-card');
  const totalPP    = document.getElementById('pay-total-pp');
  const sumBase    = document.getElementById('sum-base');
  const sumFee     = document.getElementById('sum-fee');
  const sumTotal   = document.getElementById('sum-total');
  const vipBadge   = document.getElementById('vip-badge');
  const successBox = document.getElementById('success-box');
  const amountBtns = Array.from(dlg.querySelectorAll('.fc-amt'));
  const prbTab     = document.getElementById('prb-tab');

  // ---- Config (from server)
  const VIP   = {{ vip_threshold|int }};
  const MIN   = {{ min_amount|int }};
  const DEF   = {{ default_amount|int }};
  const ENDPOINTS = {
    stripeIntent: {{ stripe_intent_url|tojson if tojson is defined else '"' ~ stripe_intent_url ~ '"' }},
    paypalOrder : {{ paypal_order_url|tojson  if tojson  is defined else '"' ~ paypal_order_url  ~ '"' }},
    paypalCapture: {{ paypal_capture_url|tojson if tojson is defined else '"' ~ paypal_capture_url ~ '"' }}
  };

  // ---- Helpers
  const fmt = (n)=> '$' + (Math.round((+n||0)*100)/100).toLocaleString(undefined,{minimumFractionDigits:2});
  const cents = (n)=> Math.round((+n||0)*100);
  const feeFor = (n)=> { const pct=0.029, fix=0.30; return +(n*pct + fix).toFixed(2); }; // Stripe-like
  const setBusy = (on)=> [payCardBtn, payPPBtn].forEach(b => b && (b.disabled = on, b.classList.toggle('opacity-60', on)));
  const showErr = (m='Something went wrong.')=> { err.textContent = m; };
  const clearErr= ()=> { err.textContent = ''; };

  function sanitizeAmountInput(){
    const raw = (custom.value||'').replace(/[^\d.]/g,'');
    const parts = raw.split('.');
    custom.value = parts.length > 1 ? parts[0] + '.' + parts.slice(1).join('').replace(/\./g,'') : parts[0];
  }

  function getAmount(){
    const btn = amountBtns.find(b => b.classList.contains('is-on'));
    const base = btn ? parseFloat(btn.dataset.amount) : parseFloat(custom.value || custom.placeholder || DEF);
    const valid = isFinite(base) ? Math.max(MIN, Math.floor(base)) : MIN;
    const fee = feeCb.checked ? feeFor(valid) : 0;
    const total = +(valid + fee).toFixed(2);
    return { base: valid, fee, total };
  }
  function paint(){
    const { base, fee, total } = getAmount();
    sumBase.textContent = fmt(base);
    sumFee.textContent  = fmt(fee);
    sumTotal.textContent= fmt(total);
    totalCard.textContent = fmt(total);
    totalPP.textContent   = fmt(total);
    vipBadge.classList.toggle('hidden', base < VIP);
  }

  // Amount interactions (hardened)
  amountBtns.forEach(b => b.addEventListener('click', () => {
    amountBtns.forEach(x => x.classList.remove('is-on'));
    b.classList.add('is-on');
    custom.value = '';
    clearErr(); paint();
  }));
  custom.addEventListener('input', () => { sanitizeAmountInput(); amountBtns.forEach(x => x.classList.remove('is-on')); paint(); });
  feeCb.addEventListener('change', paint);

  // Default selected button
  (function initDefault(){
    const match = amountBtns.find(b => +b.dataset.amount === DEF) || amountBtns[1] || amountBtns[0];
    match?.classList.add('is-on');
    custom.placeholder = String(DEF);
    paint();
  })();

  // Tabs
  const tabs = Array.from(dlg.querySelectorAll('.pm-tab'));
  function setTab(k){
    tabs.forEach(t => {
      const on = t.dataset.tab === k;
      t.dataset.active = on ? 'true' : 'false';
      t.setAttribute('aria-selected', String(on));
      document.getElementById('panel-'+t.dataset.tab)?.classList.toggle('hidden', !on);
    });
  }
  tabs.forEach(t => t.addEventListener('click', ()=> setTab(t.dataset.tab)));
  setTab('card');

  // Focus trap
  function trap(container){
    const sel = 'a,button,input,select,textarea,[tabindex]:not([tabindex="-1"])';
    function onKey(e){
      if (e.key !== 'Tab') return;
      const els = Array.from(container.querySelectorAll(sel)).filter(el=>!el.disabled && el.offsetParent !== null);
      if (!els.length) return;
      const [first,last] = [els[0], els[els.length-1]];
      if (e.shiftKey && document.activeElement===first){ e.preventDefault(); last.focus(); }
      else if (!e.shiftKey && document.activeElement===last){ e.preventDefault(); first.focus(); }
    }
    container.addEventListener('keydown', onKey);
    return () => container.removeEventListener('keydown', onKey);
  }
  let untrap = null;
  let lastFocus = null;

  // Open/Close
  function openModal(prefill){
    try { dlg.showModal?.(); } catch {}
    clearErr();
    if (prefill && typeof prefill === 'object'){
      if (prefill.amount){ amountBtns.forEach(x=>x.classList.remove('is-on')); custom.value = String(prefill.amount); }
      if (prefill.name)  nameI.value = prefill.name;
      if (prefill.email) mailI.value = prefill.email;
      paint();
    }
    dlg.classList.remove('closed');
    lastFocus = document.activeElement;
    ScrollGuard.lock();
    untrap = trap(box);
    if (!reduceMotion) setTimeout(()=> box.focus(), 0);
    announce('Donation dialog opened.');
    window.dispatchEvent(new CustomEvent('fc:donate:open'));
  }
  function closeModal(){
    dlg.classList.add('closed');
    try{ dlg.close?.(); }catch{}
    ScrollGuard.unlock();
    clearErr();
    untrap && untrap(); untrap = null;
    lastFocus?.focus?.();
    announce('Donation dialog closed.');
    window.dispatchEvent(new CustomEvent('fc:donate:close'));
  }

  document.addEventListener('click', (e) => {
    if (e.target.closest('[data-open-donate-modal]')) { e.preventDefault(); openModal(); }
    if (e.target.closest('[data-close]'))            { e.preventDefault(); closeModal(); }
  });
  dlg.addEventListener('click', (e)=>{ if (e.target === dlg) closeModal(); });
  document.addEventListener('keydown', (e)=>{ if (e.key==='Escape' && dlg.open) closeModal(); });
  dlg.addEventListener('close', ScrollGuard.unlock);
  dlg.addEventListener('cancel', (e)=>{ e.preventDefault(); closeModal(); });

  // Observer failsafe (unlock if dialog toggled externally)
  new MutationObserver(() => { if (!dlg.open || dlg.classList.contains('closed')) ScrollGuard.unlock(); })
    .observe(dlg, { attributes: true, attributeFilter: ['open','class'] });

  // Public API
  window.openDonationModal = (opts)=> openModal(opts||{});

  // -------------- Stripe (Card + Payment Request) --------------
  let stripe, elements, card, pr, prButton, stripeReady = false;
  const CARD_EL   = document.getElementById('card-element');
  const PRB_MOUNT = document.getElementById('payment-request-button');

  async function ensureStripe(){
    if (!window.Stripe){
      showErr('Card payments are currently unavailable. Please try PayPal or later.');
      return null;
    }
    if (stripeReady) return stripe;

    // bootstrap with a lightweight PI to receive publishable key
    const { total } = getAmount();
    let res, data;
    try{
      res = await fetch(ENDPOINTS.stripeIntent, {
        method: 'POST',
        headers: { 'Content-Type':'application/json', 'X-CSRFToken': getCSRF() },
        body: JSON.stringify({ amount: total })
      });
      data = await res.json().catch(()=>({}));
      if (!res.ok || !data.client_secret || !data.publishable_key) throw 0;
    } catch {
      showErr('Unable to initialize card payments right now.');
      return null;
    }

    try{
      stripe = Stripe(data.publishable_key);
      elements = stripe.elements();
      if (!card){
        card = elements.create('card', { hidePostalCode: true });
        card.mount(CARD_EL);
      }
      await setupPaymentRequest(); // harmless if unavailable
      stripeReady = true;
      return stripe;
    }catch{
      showErr('Card entry failed to load.');
      return null;
    }
  }

  async function createPI(){
    const { base, fee, total } = getAmount();
    const payload = {
      amount: total, currency:'usd',
      metadata: {
        donor_name: nameI.value || '',
        donor_email: mailI.value || '',
        note: noteI.value || '',
        base_amount: base,
        fee_amount: fee
      },
      receipt_email: mailI.value || undefined,
      description: `Donation to {{ team_name }}`
    };
    const res = await fetch(ENDPOINTS.stripeIntent, {
      method:'POST',
      headers:{ 'Content-Type':'application/json', 'X-CSRFToken': getCSRF(), 'Idempotency-Key': cryptoRandom() },
      body: JSON.stringify(payload)
    });
    const data = await res.json().catch(()=>({}));
    if (!res.ok || !data.client_secret) throw new Error(data.error?.message || 'Payment failed');
    if (!stripe && data.publishable_key) stripe = Stripe(data.publishable_key);
    return data.client_secret;
  }

  document.getElementById('pay-card').addEventListener('click', async () => {
    clearErr();
    const { base, total } = getAmount();
    if (!isFinite(total) || total < MIN) { showErr(`Minimum is $${MIN}.`); return; }
    try {
      const s = await ensureStripe();
      if (!s) return;
      const clientSecret = await createPI();
      const billing_details = {
        name: nameI.value || undefined,
        email: mailI.value || undefined
      };
      setBusy(true);
      const { error: se } = await s.confirmCardPayment(clientSecret, {
        payment_method: { card, billing_details }
      });
      setBusy(false);
      if (se) { showErr(se.message || 'Card was not accepted.'); return; }
      handleSuccess({ amount: base, total });
    } catch (e){ setBusy(false); showErr(e.message || 'Something went wrong.'); }
  });

  async function setupPaymentRequest(){
    if (!stripe || !PRB_MOUNT || pr) return;
    const { total } = getAmount();
    try{
      pr = stripe.paymentRequest({
        country:'US', currency:'usd',
        total:{ label: {{ team_name|tojson if tojson is defined else '"' ~ team_name ~ '"' }}, amount: cents(total) },
        requestPayerEmail:true, requestPayerName:true
      });
      const can = await pr.canMakePayment();
      if (can) {
        prbTab?.classList.remove('hidden');
        const els = elements || stripe.elements();
        prButton = els.create('paymentRequestButton', { paymentRequest: pr });
        PRB_MOUNT.innerHTML = '';
        prButton.mount('#payment-request-button');
        pr.on('paymentmethod', async (ev) => {
          try {
            const clientSecret = await createPI();
            const { error: se } = await stripe.confirmCardPayment(clientSecret, { payment_method: ev.paymentMethod.id }, { handleActions:false });
            if (se) { ev.complete('fail'); showErr(se.message || 'Payment failed.'); return; }
            ev.complete('success');
            const { error } = await stripe.confirmCardPayment(clientSecret);
            if (error) { showErr(error.message || 'Payment failed.'); return; }
            const { base, total } = getAmount();
            handleSuccess({ amount: base, total });
          } catch (e){ ev.complete('fail'); showErr(e.message || 'Payment failed.'); }
        });
      }
    }catch{ /* ignore */ }
  }

  // -------------- PayPal (Orders v2) --------------
  document.getElementById('pay-paypal').addEventListener('click', async () => {
    clearErr();
    const { base, total } = getAmount();
    if (!isFinite(total) || total < MIN) { showErr(`Minimum is $${MIN}.`); return; }
    try {
      setBusy(true);
      const r1 = await fetch(ENDPOINTS.paypalOrder, {
        method:'POST', headers: { 'Content-Type':'application/json', 'X-CSRFToken': getCSRF() },
        body: JSON.stringify({ amount: total, note: noteI.value||'', donor_email: mailI.value||'' })
      });
      const j1 = await r1.json().catch(()=>({}));
      if (!r1.ok || !j1.order_id) throw new Error(j1.error?.message || 'Unable to start PayPal');

      const r2 = await fetch(ENDPOINTS.paypalCapture, {
        method:'POST', headers: { 'Content-Type':'application/json', 'X-CSRFToken': getCSRF() },
        body: JSON.stringify({ order_id: j1.order_id })
      });
      const j2 = await r2.json().catch(()=>({}));
      setBusy(false);
      if (!r2.ok || String(j2.status).toUpperCase() !== 'COMPLETED') {
        throw new Error(j2.error?.message || 'PayPal capture failed');
      }
      handleSuccess({ amount: base, total });
    } catch (e){ setBusy(false); showErr(e.message || 'PayPal error.'); }
  });

  // -------------- Success handling --------------
  function handleSuccess({ amount, total }){
    try {
      successBox.classList.remove('hidden');
      if (amount >= VIP && typeof window.launchConfetti === 'function') {
        window.launchConfetti({ particleCount: 180, spread: 80 });
      }
      window.dispatchEvent(new CustomEvent('fc:donation:success', { detail: { amount, total } }));
      window.dispatchEvent(new CustomEvent('fc:vip', { detail: { name: (nameI.value||'VIP Supporter'), amount } }));
      // Optimistic meter bump
      window.dispatchEvent(new CustomEvent('fc:meter:update', { detail: { raised: amount } }));
      noteI.value = '';
      setTimeout(() => {
        successBox.classList.add('hidden');
        closeModal();
      }, reduceMotion ? 200 : 1100);
    } catch {}
  }

  // Utility
  function cryptoRandom(len=12){
    const chars='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const out=[]; const a=new Uint8Array(len); (window.crypto||window.msCrypto).getRandomValues(a);
    for (const n of a) out.push(chars[n%chars.length]); return out.join('');
  }

  // Prefill via event
  window.addEventListener('fc:donate:open', (ev)=>{
    const d = ev.detail || {};
    if (d.amount){ amountBtns.forEach(x=>x.classList.remove('is-on')); custom.value = String(d.amount); }
    if (d.name)  nameI.value = d.name;
    if (d.email) mailI.value = d.email;
    paint();
  });
})();
</script>

